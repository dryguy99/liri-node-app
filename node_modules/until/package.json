{
  "_args": [
    [
      {
        "raw": "until",
        "scope": null,
        "escapedName": "until",
        "name": "until",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/dryguy/git-work/liri-node-app"
    ]
  ],
  "_from": "until@latest",
  "_id": "until@0.1.1",
  "_inCache": true,
  "_location": "/until",
  "_npmUser": {
    "name": "kk1fff",
    "email": "kk1fff@patrickz.net"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "raw": "until",
    "scope": null,
    "escapedName": "until",
    "name": "until",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/until/-/until-0.1.1.tgz",
  "_shasum": "9ab6eb135f29d8a7d490a3694f4221a55542eaae",
  "_shrinkwrap": null,
  "_spec": "until",
  "_where": "/Users/dryguy/git-work/liri-node-app",
  "author": {
    "name": "Patrick Wang",
    "email": "kk1fff@patrickz.net"
  },
  "bugs": {
    "url": "https://github.com/kk1fff/until/issues"
  },
  "dependencies": {},
  "description": "An event collector of nodejs' EventEmitter",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9ab6eb135f29d8a7d490a3694f4221a55542eaae",
    "tarball": "https://registry.npmjs.org/until/-/until-0.1.1.tgz"
  },
  "homepage": "https://github.com/kk1fff/until#readme",
  "keywords": [
    "event",
    "async",
    "node"
  ],
  "main": "./lib/main.js",
  "maintainers": [
    {
      "name": "kk1fff",
      "email": "kk1fff@patrickz.net"
    }
  ],
  "name": "until",
  "optionalDependencies": {},
  "readme": "# until\n\n__unitl__ is a very simple helper object that helps on waiting multiple\n__EventEmitter__. It is an EventEmitter itselt, and it waits for all the\n__EventEmitter__ firing success events, or one of them firing failure event.\n\nThe APIs are\n\n    var waitings = new require('until').Waitings();\n    waitings.add(EventEmitter      e,\n                 Array or String   success events,\n                 Array or String   fail events,\n                 Array or String   notification events)\n\nAn example:\n\n    var waitings = new until.Waitings();\n    waitings.add(emitter,         // The emitter object\n                 ['ok', 'done'],  // A list of event names that stand for success.\n                 ['bad', 'fail'], // A list of event names that stand for failure.\n                 ['progress']);   // A list of event names will continuously send.\n\n## Class 'Waitings'\n\n    var waiting = new until.Waitings();\n\nThis class is the main class of the APIs. __Waitings__ object is an __EventEmitter__\nwhich provides 'ok', 'error' events. __Waitings__ object listens to many\n__EventEmitters__ and fire 'ok' when it realizes all the __EventEmitters__ it listens\nto have fired success events, or 'error' when one of the EventEmitters fired\nan error event.\n\nWe don't know what name the success/error event are, so we expect users to define\nthe success/error event name when they add the __EventEmitter__ into the\nlistening-to list of __Waitings__.\n\n### Waitings.add(emitter, success, error)\n\n* _emitter_: __EventEmitter__\n* _success_: __String__ or __Array__ of __String__\n* _error_: __String__ or __Array__ of __String__\n\nAdding a __EventEmitter__ to the __Waitings__ object. _emitter_ is an\n__EventEmitter__ that is to be listened to. _success_ is a list of events that\nstand for 'success', when __Waitings__ object heard the event in the success\nlist, it knows this _emitter_ \"finished successfully\". So does _error_.\n\n### Event: 'ok'\n\nThis will be fired only once, when all of the __EventEmitter__ that the\n__Waitings__ is waiting for finished successfully. The handler of this event\nis expected to look like\n\n    function handler(list)\n\nThe _list_ argument is an array that stores the arguemnts of each event\nhandler, with following structure:\n\n    {\n      \"emitter\" : // The reference of the emitter that fires this success event\n      \"event\"   : // String: the event name the emitter fired\n      \"arg\"     : // Array: the arguments passed to the event handler\n    }\n\nNo matter how many times an __EventEmitter__ fires the success events, only\nthe first event will be stored.\n\n### Event: 'error'\n\nIf one of the __EventEmitter__ fires the error event, this event will be fired,\nand there will no futher event from this __Waitings__.\n\nThe handler is expected to take a argument, which is _error_, the argument that\nis got from the __EventEmitter__ which fires the error event.\n\n## Test\n\nA very earily test runner is located at ./test.js, use\n\n    node test.js\n\nto run the test cases.\n\n## License\n\nWe release this package with Apache License 2.0. Please see the LICENSE file\nin the source.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/kk1fff/until.git"
  },
  "version": "0.1.1"
}
